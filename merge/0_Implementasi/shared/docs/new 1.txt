sip, paham. ini **AI-agent-friendly implementation plan** yang rapi, bisa dikerjakan paralel, dan minim salah paham. tanpa kode—cuma instruksi & kontrak kerja jelas.

# Tujuan (singkat)

* **Flow tunggal:** UI/Modul lain → **Converter** → `shared/layer/mainconfig.json` → **Orchestrator (MainScreen)** → **LayerBasic** → **Stages** → Display.
* **Struktur:** `shared/layer/*` = logic, `shared/stages/*` = renderer (stabil), `yuzha/src/*` = host display.
* **Tidak ubah parent stages.** Hanya pakai file yang sudah ada + 1 file JSON runtime.

# Source of Truth

* **Runtime JSON:** `C:\VSCODE\yuzha-yo\shared\layer\mainconfig.json` (schema = `LibraryConfig` dari `LayerTypes.ts`)
* **UI JSON (human-friendly):** `yuzha/src/configUI/main.json` → lewat `LayerConverter.ts` → tulis ke `mainconfig.json`

# File Inventori (yang dipakai)

* `shared/layer/LayerTypes.ts`, `LayerValidator.ts`, `LayerImageResolver.ts`, `LayerLogicBasic.ts`, `LayerMappingImage.ts`, `LayerMappingScreen.ts`, `LayerPipeline.ts`, `LayerProducer.ts`, `LayerConverter.ts`
* `shared/layer/mainconfig.json` *(baru; runtime)*
* `yuzha/src/MainScreen.tsx`, `MainScreenConfig.ts`, `StagesCanvasLayer.tsx`, `StagesCanvas.tsx`, `useStages.ts` *(orchestrator+display; stages stay intact)*
* (Efek: `LayerLogicSpin.ts`, `LayerLogicOrbit.ts`, `LayerLogicPulse.ts`, `LayerLogicFade.ts` — tidak disentuh sekarang)

---

# Work Packages (WP) — bisa dikerjakan oleh agent mana pun

## WP-0: Guardrails & Konvensi (semua agent wajib patuh)

* **No edits** di `shared/stages/*`.
* **Jangan bikin file TS baru** (kecuali `mainconfig.json`).
* Sudut: **0–360, up=90°**. **Spin ON ⇒ manual angle OFF**.
* Semua perubahan **harus lolos typecheck** (`LayerTypes.ts` acuan).
* PR harus menyertakan **Acceptance Checklist** (di bawah).

## WP-1: Runtime Config JSON (Owner: Orchestrator)

**File:** `shared/layer/mainconfig.json`
**Tugas:**

1. Buat **file kosong valid** minimal:

   ```json
   { "stage": { "width": 2048, "height": 2048, "origin": "center" }, "layers": [] }
   ```
2. Sepakati bahwa **orchestrator & pipeline** hanya membaca **file ini** saat runtime.
   **DoD:**

* File valid JSON, dapat di-import atau di-fetch lokal.
* App boot dengan **canvas kosong** tanpa error.

## WP-2: Converter Bridge UI→Runtime (Owner: Converter)

**File:** `shared/layer/LayerConverter.ts`, input: `yuzha/src/configUI/main.json`, output: `shared/layer/mainconfig.json`
**Tugas:**

1. Definisikan **fungsi translate** (pakai yang sudah ada di `LayerConverter.ts`) untuk memetakan UI → `LibraryConfig` (tanpa tambah file).
2. **Tulis hasil** ke `mainconfig.json`. (Kalau penulisan file tidak ada di app, cukup return object; Orchestrator yang commit ke file—lihat WP-3.)
   **DoD:**

* Input UI minimal → keluar **object** `LibraryConfig` valid.
* Tidak mengubah signature public yang ada; hanya extend mapping bila perlu.
* Bila butuh field baru untuk Clock nanti → **tandai TODO**, **jangan implement kini**.

## WP-3: Orchestrator Host (Owner: Host)

**Files:** `yuzha/src/MainScreen.tsx`, `yuzha/src/MainScreenConfig.ts`, `StagesCanvasLayer.tsx`
**Tugas:**

1. **MainScreen**:

   * Baca **`shared/layer/mainconfig.json`** (import statis lokal).
   * Panggil **`LayerPipeline.produceBasic(config, ctx)`** → hasil `LayerData[]`.
   * Kirim ke **StagesCanvasLayer** → **display**.
2. **MainScreenConfig.ts**:

   * Simpan **preset minimal** (blank) sebagai fallback, tapi **default gunakan** `mainconfig.json`.
     **DoD:**

* App run: **canvas kosong** (pakai `layers: []`) → no error, Stages connect.
* Replace `mainconfig.json` (isi 1 layer gambar) → tampil benar (pos/scale/path) tanpa efek.

## WP-4: Pipeline Entry “LayerBasic” (Owner: Logic)

**File:** `shared/layer/LayerPipeline.ts`
**Tugas:**

1. Pastikan **`produceBasic()`** hanya: Validator → ImageResolver → LogicBasic → MappingImage → MappingScreen.
2. **Re-export alias** “LayerBasic” untuk `produceBasic` (di file yang sama; tidak buat file baru).
   **DoD:**

* Output `LayerData[]` siap render (order/path/scale/position) — **tanpa rotasi/efek**.
* Typecheck lulus.

## WP-5: Integrity Check Komponen Basic (Owner: Logic QA)

**Files:** `LayerLogicBasic.ts`, `LayerMappingImage.ts`, `LayerMappingScreen.ts`, `LayerImageResolver.ts`, `LayerValidator.ts`, `LayerTypes.ts`
**Tugas:**

* Verifikasi Basic **tidak** menyuntik rotasi.
* Mapping menghasilkan **displayWidth/Height, offset, anchor** benar.
* Screen mapping sesuai origin.
* Asset resolver meneruskan path/meta dengan aman (NaN dimensi ditoleransi renderer).
  **DoD:**
* **Tidak ada perubahan** bila tidak perlu. Semua kompatibel dengan `produceBasic()`.

---

# Acceptance Checklist (PR template)

* [ ] **Stages tidak diubah**.
* [ ] `shared/layer/mainconfig.json` tersedia & valid.
* [ ] `MainScreen` membaca `mainconfig.json` dan mem-pipeline via `produceBasic`.
* [ ] `produceBasic` → `LayerData[]` (order/path/scale/position) tanpa efek.
* [ ] App boot **blank** (layers:\[]); swap config **1 layer** tampil OK.
* [ ] **Typecheck lulus**; tidak ada file TS baru selain JSON runtime.

# Quick Testing Matrix

* **Blank**: `layers: []` → canvas aktif, no error.
* **Single Image (Basic)**: tampil posisi/scale sesuai preset (contain/center).
* **Manual Angle (Spin OFF)**: Basic ignore (tidak merotasi).
* **Spin ON** (nanti): manual angle OFF (hanya sanity—tanpa implement baru).
* **Orbit** (nanti): tidak mempengaruhi Basic path.

# Failure Modes & Handling

* **mainconfig.json malformed** → Orchestrator fallback ke preset minimal; log peringatan.
* **Asset 404 / size unknown** → tetap render container; renderer yang resolve dimensi saat load.
* **Prop mismatch ke StagesCanvasLayer** → perbaiki pada Host (jangan sentuh stages).

# Komunikasi Antar-Agent (Prompt singkat)

* **Converter → Orchestrator:** “Hasil `LibraryConfig` valid berikut siap ditulis ke `shared/layer/mainconfig.json`.”
* **Orchestrator → Logic:** “Jalankan `produceBasic(config)`; jangan aktifkan efek.”
* **QA → Host:** “Ganti `mainconfig.json` dengan sample 1 layer; amati posisi & scale.”

# Versi & Commit Style

* `feat(host): read runtime config and pipe to LayerBasic`
* `chore(config): add shared/layer/mainconfig.json baseline`
* `docs(pipeline): assert LayerBasic path and acceptance`
* `test(manual): blank & single-image smoke run`

---

## Ringkas

* **Yang dikerjakan sekarang:** WP-1 → WP-4 → WP-3 → WP-5 (QA).
* **Tidak ada kode baru selain** `shared/layer/mainconfig.json`.
* **Semua pakai file yang sudah ada**.
  kalau setuju, kita eksekusi persis plan ini—hasilnya blank screen jalan, pipeline Basic solid, dan siap ditumpuk Spin/Orbit/Clock berikutnya.
